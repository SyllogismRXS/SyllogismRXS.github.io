<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://kevindemarco.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kevindemarco.com/" rel="alternate" type="text/html" /><updated>2023-01-05T12:18:10-05:00</updated><id>https://kevindemarco.com/feed.xml</id><title type="html">Kevin DeMarco</title><subtitle>I write about robotics, technology, music, woodworking, and bicycling.</subtitle><author><name>Kevin DeMarco</name></author><entry><title type="html">ROS Development in Docker</title><link href="https://kevindemarco.com/ros/docker/docker-compose/robotics/programming/development/2022/12/28/ros-docker.html" rel="alternate" type="text/html" title="ROS Development in Docker" /><published>2022-12-28T09:45:00-05:00</published><updated>2022-12-28T09:45:00-05:00</updated><id>https://kevindemarco.com/ros/docker/docker-compose/robotics/programming/development/2022/12/28/ros-docker</id><content type="html" xml:base="https://kevindemarco.com/ros/docker/docker-compose/robotics/programming/development/2022/12/28/ros-docker.html"><![CDATA[<p>If you use the <a href="https://www.ros.org">Robot Operating System (ROS)</a> and you are
frustrated with system dependencies, incompatible ROS / Linux operating system
versions, and non-deterministic builds, then this article is for you.</p>

<p>For each of my ROS projects, I create a <a href="https://www.docker.com/">Docker</a>
development environment to isolate the ROS environment from my host system’s
environment. This allows me to easily run an old version of ROS (e.g., ROS
Kinetic), on a newer version of Ubuntu (e.g., Ubuntu 22.04 Jammy). The inverse
is also true: you can run a newer ROS version on an older Linux
distribution. Docker is conceptually similar to a very light-weight virtual
machine, but Docker allows you to more easily share hardware resources between
the host machine and the Docker container.</p>

<p>Throughout this guide, I will be referencing an example git repository
(<a href="https://github.com/SyllogismRXS/ros_docker_setup">https://github.com/SyllogismRXS/ros_docker_setup</a>)
that I created to demonstrate how to set up a ROS Docker development
environment.</p>

<p>There are a number of other guides to setup a ROS Docker development
environment:</p>
<ul>
  <li><a href="https://roboticseabass.com/2021/04/21/docker-and-ros/">ROS Docker 1</a></li>
  <li><a href="https://tuw-cpsg.github.io/tutorials/docker-ros/">ROS Docker 2</a></li>
  <li><a href="https://subscription.packtpub.com/book/hardware-&amp;-creative/9781786463654/1/ch01lvl1sec11/using-ros-from-a-docker-image">Using ROS from a Docker
Image</a></li>
  <li><a href="https://docs.freedomrobotics.ai/docs/ros-development-in-docker-on-mac-and-windows">ROS Dev in Docker
Mac/Windows</a></li>
</ul>

<p>I think that many of the articles focus on basic Docker commands, instead of an
opinionated description of how to organize your ROS workspaces and repositories
to facilitate collaborative development and continuous integration (CI).</p>

<h2 id="design-requirements">Design Requirements</h2>

<p>In our ROS Docker setup, we want to be able to:</p>

<ol>
  <li>Use our preferred code/text editor on the host system.</li>
  <li>Launch ROS GUI programs from within the container.</li>
  <li>Leverage the host system’s GPU, if available.</li>
  <li>Make it easy for new developers to start building / writing ROS code.</li>
  <li>Minimize long <code class="language-plaintext highlighter-rouge">docker</code> command line arguments / options.</li>
</ol>

<h2 id="host-system-dependencies">Host System Dependencies</h2>

<p>As a warning, I’m writing this guide from the perspective of someone who uses
Ubuntu for development, but most of the instructions should apply to anyone
using a Linux-based (amd64) system. (Note to self: try these instructions on my
Windows 10 partition).</p>

<ol>
  <li>
    <p><a href="https://docs.docker.com/engine/install/">Install Docker</a>. Make sure to
follow the
<a href="https://docs.docker.com/engine/install/linux-postinstall/">post-installation</a>
steps, so you don’t have to use <code class="language-plaintext highlighter-rouge">sudo</code> to run Docker.</p>
  </li>
  <li>
    <p><a href="https://docs.docker.com/compose/install/linux/">Install Docker Compose</a>.</p>
  </li>
  <li>
    <p><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">Install git</a>.</p>
  </li>
</ol>

<p>That’s all you should need! We will be installing all the messy ROS bits inside
of a Docker container, so your host system will stay nice and clean.</p>

<h2 id="host-directory-setup--docker-build">Host Directory Setup / Docker Build</h2>

<p>On my host machine, I keep all of my ROS projects in a folder located at
<code class="language-plaintext highlighter-rouge">~/ros</code> and I will use that directory in this guide to be explicit, but you can
use a different root directory.</p>

<ol>
  <li>
    <p>Create the <code class="language-plaintext highlighter-rouge">src</code> directory in a new ROS workspace:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mkdir -p ~/ros/ros_docker_example/workspace/src
</code></pre></div>    </div>

    <p>In this case, the <code class="language-plaintext highlighter-rouge">ros_docker_example</code> is the name of my current ROS
 project. I keep multiple ROS projects in the <code class="language-plaintext highlighter-rouge">~/ros</code> folder. Each ROS
 project gets its own set of Docker / Compose files.</p>
  </li>
  <li>
    <p>Create a <code class="language-plaintext highlighter-rouge">data</code> directory, which will be used to facilitate exchanging
files (e.g., ROS bags), between the ROS Docker container and your host system:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mkdir -p ~/ros/ros_docker_example/data
</code></pre></div>    </div>
  </li>
  <li>
    <p>Clone the ROS Docker setup files from my GitHub repository under the
<code class="language-plaintext highlighter-rouge">ros_docker_example</code> directory:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cd ~/ros/ros_docker_example
 git clone https://github.com/SyllogismRXS/ros_docker_setup.git
</code></pre></div>    </div>

    <p>The <code class="language-plaintext highlighter-rouge">~/ros/ros_docker_example</code> directory should now contain the
 following:</p>

    <p><img src="https://kevindemarco.com/assets/images/2022-12-28-ros-docker/tree.png" alt="Directory Structure" /></p>
  </li>
  <li>
    <p>Since this ROS Docker example targets the ROS2 Humble distribution, clone
the ROS2 example repository into your workspace’s <code class="language-plaintext highlighter-rouge">src</code> folder. We will be
building these example projects to test our build system. You would replace
this repository with your own ROS repositories.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cd ~/ros/ros_docker_example/workspace/src
 git clone -b humble https://github.com/ros2/examples.git
</code></pre></div>    </div>
  </li>
  <li>
    <p>We will now create a <code class="language-plaintext highlighter-rouge">.env</code> file in the same directory that contains the
<code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file with your user’s ID and group ID. This is needed,
so that we can launch ROS GUIs from within the Docker container.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cd ~/ros/ros_docker_example/ros_docker_setup
 echo -e "USER_ID=$(id -u ${USER})\nGROUP_ID=$(id -g ${USER})" &gt; .env
</code></pre></div>    </div>

    <p>Docker compose will <a href="https://docs.docker.com/compose/environment-variables/">automatically
 read</a> the <code class="language-plaintext highlighter-rouge">.env</code>
 file before running <code class="language-plaintext highlighter-rouge">up</code> commands.</p>
  </li>
  <li>
    <p>We can now build the Docker image in the <code class="language-plaintext highlighter-rouge">ros_docker_setup</code> directory:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker compose build
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="test-the-docker-environment">Test the Docker Environment</h2>

<ol>
  <li>
    <p>Bring up the Docker container, step into it, and run the minimal subscriber
example</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker compose up -d dev
 docker exec -it ros_humble /bin/bash
 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function
</code></pre></div>    </div>
  </li>
  <li>
    <p>In a different terminal, step into the already running container, and run
the minimal publisher example:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker exec -it ros_humble /bin/bash
 ros2 run examples_rclcpp_minimal_publisher publisher_member_function
</code></pre></div>    </div>

    <p>At this point, you should see ROS messages being printed to the terminal.</p>
  </li>
  <li>
    <p>Launch the rviz2 GUI from inside the container:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker exec -it ros_humble /bin/bash
 rviz2
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="development-use-case">Development Use Case</h2>

<p>The primary use case for this Docker setup is to develop ROS packages. After
building the Docker image, you can start a container (once with the <code class="language-plaintext highlighter-rouge">up</code> command,
enter into it (with the <code class="language-plaintext highlighter-rouge">exec</code> command), run a build command (with <code class="language-plaintext highlighter-rouge">colcon</code>),
and run other ROS commands. For example, you can start and enter a container:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose up -d dev
docker exec -it ros_humble /bin/bash
</code></pre></div></div>

<p>At this point, you can use your host’s code/text editor to make changes to code
in your host’s workspace <code class="language-plaintext highlighter-rouge">src</code> directory and they will immediately take effect
in the container’s <code class="language-plaintext highlighter-rouge">src</code> directory. Then, inside of the container, build the
workspace with the command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>colcon build --symlink-install
</code></pre></div></div>

<p>You can use multiple Docker container terminals by running <code class="language-plaintext highlighter-rouge">docker exec -it
ros_humble /bin/bash</code> in another terminal after the <code class="language-plaintext highlighter-rouge">up</code> command was already
run once.</p>

<h2 id="detailed-notes">Detailed Notes</h2>

<p>The following are detailed notes that describe some of the Docker
options/features and why they were chosen. This section is most helpful if you
following along with the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> and <code class="language-plaintext highlighter-rouge">Dockerfile</code> commands in the
<a href="https://github.com/SyllogismRXS/ros_docker_setup"><code class="language-plaintext highlighter-rouge">ros_docker_setup</code></a>
repository.</p>

<h3 id="docker-composeyml">docker-compose.yml</h3>

<ol>
  <li>
    <p>The
<a href="https://github.com/SyllogismRXS/ros_docker_setup/blob/main/docker-compose.yml"><code class="language-plaintext highlighter-rouge">docker-compose.yml</code></a>
file contains two separate “services”: <code class="language-plaintext highlighter-rouge">dev</code> and <code class="language-plaintext highlighter-rouge">dev-nvidia</code>. The <code class="language-plaintext highlighter-rouge">dev-nvidia</code>
service contains additional flags to share the host’s NVIDIA GPU with the
Docker container. In order to use the <code class="language-plaintext highlighter-rouge">dev-nvidia</code> service, you will need both
an NVIDIA GPU and you will need to install <code class="language-plaintext highlighter-rouge">nvidia-docker2</code> using NVIDIA’s
<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html">instructions</a>.</p>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">USER_ID</code> and <code class="language-plaintext highlighter-rouge">GROUP_ID</code> variables are passed from <code class="language-plaintext highlighter-rouge">.env</code> to the Docker
build command via the build arguments:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> args:
   USER_ID: ${USER_ID:-0}
   GROUP_ID: ${GROUP_ID:-0}
</code></pre></div>    </div>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">network_mode</code> is set to <code class="language-plaintext highlighter-rouge">host</code> to allow the container to have full
access to the host’s networking system. This is fine for a development
environment, but should be made more restrictive in a deployed container
(not our current use-case).</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> network_mode: "host"
</code></pre></div>    </div>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">DISPLAY</code> environment variable display is passed from the host to the
container to enable GUI applications. In addition, the <code class="language-plaintext highlighter-rouge">.X11-unix</code> and
<code class="language-plaintext highlighter-rouge">.docker.xauth</code> files are mounted from the host to the container in the
<code class="language-plaintext highlighter-rouge">volumes</code> section to enable GUIs.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> environment:
   - DISPLAY=${DISPLAY}             # Pass the display for GUI
   - QT_X11_NO_MITSHM=1             # Needed by QT programs
   - XAUTHORITY=/tmp/.docker.xauth
</code></pre></div>    </div>
  </li>
  <li>
    <p>The <code class="language-plaintext highlighter-rouge">src</code> and <code class="language-plaintext highlighter-rouge">data</code> directories of the workspace are mounted from the host
to the container in the <code class="language-plaintext highlighter-rouge">volumes</code> section. It is important to note that the
<code class="language-plaintext highlighter-rouge">volumes</code> section of the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file is only relevant during
<code class="language-plaintext highlighter-rouge">up</code> and <code class="language-plaintext highlighter-rouge">run</code> commands, not during the <code class="language-plaintext highlighter-rouge">build</code> phase. During build time,
the code is copied into the Docker image with the <code class="language-plaintext highlighter-rouge">COPY</code> command in the
<code class="language-plaintext highlighter-rouge">Dockerfile</code>.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> volumes:
    - /tmp/.X11-unix:/tmp/.X11-unix:rw
    - /tmp/.docker.xauth:/tmp/.docker.xauth:rw
    - ../workspace/src:/home/ros/workspace/src
    - ../data:/home/ros/data
</code></pre></div>    </div>

    <p>The <code class="language-plaintext highlighter-rouge">.X11-unix</code> and <code class="language-plaintext highlighter-rouge">.docker.xauth</code> files are mounted to help with
 launching GUIs from the container.</p>
  </li>
</ol>

<h3 id="dockerfile">Dockerfile</h3>

<ol>
  <li>
    <p>The
<a href="https://github.com/SyllogismRXS/ros_docker_setup/blob/main/Dockerfile"><code class="language-plaintext highlighter-rouge">Dockerfile</code></a>
contains the instructions to build the ROS Docker image. Our <code class="language-plaintext highlighter-rouge">Dockerfile</code> is
based on the <code class="language-plaintext highlighter-rouge">osrf/ros:humble-desktop-full</code> Docker image provided by the
main ROS folks (OSRF, OpenRobotics, etc.) This image already contains an
installed version of ROS Humble and many of the GUIs and build utilities,
which we will be using.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> FROM osrf/ros:humble-desktop-full
 MAINTAINER Kevin DeMarco
 ENV DEBIAN_FRONTEND noninteractive
 SHELL ["/bin/bash", "-c"]
</code></pre></div>    </div>
  </li>
  <li>
    <p>After declaring the <code class="language-plaintext highlighter-rouge">FROM</code> image and some basic metadata, we install a
specific Debian package:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> RUN apt-get update \
     &amp;&amp; apt-get install -y \
     python3-pip \
     &amp;&amp; rm -rf /var/lib/apt/lists/*
</code></pre></div>    </div>

    <p>In your own Dockerfile, you would augment this Debian package installation
 list to fit your needs. You should list ROS package dependencies
 <a href="http://wiki.ros.org/catkin/package.xml#Dependencies">explicitly</a> in their
 respective <code class="language-plaintext highlighter-rouge">package.xml</code> files, but sometimes there are missing
 dependencies in upstream packages.</p>
  </li>
  <li>
    <p>Using the <code class="language-plaintext highlighter-rouge">adduser</code> command, we create a <code class="language-plaintext highlighter-rouge">ros</code> user with the same <code class="language-plaintext highlighter-rouge">USER_ID</code>
and <code class="language-plaintext highlighter-rouge">GROUP_ID</code> as your host system, which enables GUI applications. In
addition, the <code class="language-plaintext highlighter-rouge">ros</code> user can issue <code class="language-plaintext highlighter-rouge">sudo</code> commands without a
password. Again, this is fine for a local development environment, but you
wouldn’t do this in a deployed Docker image.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ENV USERNAME ros
 RUN adduser --disabled-password --gecos '' $USERNAME \
     &amp;&amp; usermod  --uid ${USER_ID} $USERNAME \
     &amp;&amp; groupmod --gid ${GROUP_ID} $USERNAME \
     &amp;&amp; usermod --shell /bin/bash $USERNAME \
     &amp;&amp; adduser $USERNAME sudo \
     &amp;&amp; adduser $USERNAME dialout \
     &amp;&amp; echo '%sudo ALL=(ALL) NOPASSWD:ALL' &gt;&gt; /etc/sudoers
</code></pre></div>    </div>
  </li>
  <li>
    <p>Run <code class="language-plaintext highlighter-rouge">rosdep</code> update. Also, add the sourcing of the main ROS system’s setup
file (<code class="language-plaintext highlighter-rouge">/opt/ros/humble/setup.bash</code>) and colcon’s setup file to the <code class="language-plaintext highlighter-rouge">ros</code>
user’s <code class="language-plaintext highlighter-rouge">.bashrc</code>. This provides the <code class="language-plaintext highlighter-rouge">ros</code> user with access to the ROS
environment every time the container is entered.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> # Run rosdep update, add ROS, Gazebo, and colcon setup to ros user's .bashrc
 RUN sudo apt-get update \
     &amp;&amp; rosdep update \
     &amp;&amp; echo 'source /opt/ros/${ROS_DISTRO}/setup.bash' &gt;&gt; /home/$USERNAME/.bashrc \
     &amp;&amp; echo 'source /usr/share/colcon_cd/function/colcon_cd.sh' &gt;&gt; /home/$USERNAME/.bashrc
</code></pre></div>    </div>
  </li>
  <li>
    <p>Near the end of the <code class="language-plaintext highlighter-rouge">Dockerfile</code>, the code is copied into the image with the
<code class="language-plaintext highlighter-rouge">COPY</code> command.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> COPY --chown=ros ./src src
</code></pre></div>    </div>

    <p>The code is copied into the image, so that we can install it’s dependencies
and make sure it builds deterministically. However, when the user runs the
<code class="language-plaintext highlighter-rouge">docker compose up</code> command, the code on the host system is mounted over the
code that was previously copied into the image. This allows changes to the
repository code to show up immediately inside the container for incremental
builds. During the initial building of the image, the code that was copied
into the image is built with:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
     &amp;&amp; sudo rosdep install --from-paths . --ignore-src -r -y --rosdistro=${ROS_DISTRO} \
     &amp;&amp; colcon build --symlink-install \
     &amp;&amp; echo 'source ~/workspace/install/local_setup.bash' &gt;&gt; /home/$USERNAME/.bashrc
</code></pre></div>    </div>

    <p>The ROS package dependencies listed in the <code class="language-plaintext highlighter-rouge">package.xml</code> files are
 installed during the <code class="language-plaintext highlighter-rouge">rosdep install</code> command. <code class="language-plaintext highlighter-rouge">colcon</code> is used to perform
 the workspace build. In addition, the workspace’s <code class="language-plaintext highlighter-rouge">local_setup.bash</code> is
 added to the <code class="language-plaintext highlighter-rouge">ros</code> user’s <code class="language-plaintext highlighter-rouge">.bashrc</code> file, so that it’s resources are
 immediately available when the container is entered.</p>
  </li>
</ol>

<h2 id="wrap-up">Wrap Up</h2>

<p>By maintaining a <code class="language-plaintext highlighter-rouge">Dockerfile</code> and a <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file for each of your
ROS projects, you can isolate your ROS development environments from your
host’s operating system. It might be overkill to create a set of Docker files
for each ROS repository, but you might want to create a Docker development
environment for each set of ROS packages that you use for an overall
project. Typically, this would be at the ROS workspace level, but it could
cover multiple workspaces as well.</p>

<p>Finally, I use <a href="http://wiki.ros.org/vcstool">vcstool</a> to track the various git
repositories in my workspace’s <code class="language-plaintext highlighter-rouge">src</code> folder. It is common practice in ROS
development to maintain a vcstool <code class="language-plaintext highlighter-rouge">.repos</code> file, which contains a list of the
git repositories that your project depends on for source builds. I track my
project’s <code class="language-plaintext highlighter-rouge">.repos</code> file alongside the <code class="language-plaintext highlighter-rouge">Dockerfile</code> and <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>
files. Take a look at our <a href="https://github.com/RIF-Robotics/dingo_setup">Docker configuration
repo</a> for the Clearpath Dingo for
an example.</p>

<h2 id="looking-forward">Looking Forward</h2>

<p>In a future post I will describe how I use <a href="https://direnv.net/"><code class="language-plaintext highlighter-rouge">direnv</code></a> to
quickly open multiple ROS Docker container terminals.</p>]]></content><author><name>Kevin DeMarco</name></author><category term="ROS" /><category term="Docker" /><category term="docker-compose" /><category term="robotics" /><category term="programming" /><category term="development" /><summary type="html"><![CDATA[If you use the Robot Operating System (ROS) and you are frustrated with system dependencies, incompatible ROS / Linux operating system versions, and non-deterministic builds, then this article is for you.]]></summary></entry><entry><title type="html">A hoarder’s guide to wood storage</title><link href="https://kevindemarco.com/woodworking/storage/2021/02/22/wood-rack.html" rel="alternate" type="text/html" title="A hoarder’s guide to wood storage" /><published>2021-02-22T09:45:00-05:00</published><updated>2021-02-22T09:45:00-05:00</updated><id>https://kevindemarco.com/woodworking/storage/2021/02/22/wood-rack</id><content type="html" xml:base="https://kevindemarco.com/woodworking/storage/2021/02/22/wood-rack.html"><![CDATA[<p>Do you actually have a hoarding problem if you can build efficient storage
solutions for things that you can’t throw away? I’m not going to answer that
question because I probably won’t like the answer.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/wood-on-ground-1.jpg" alt="Wood on ground" /></p>

<p>It’s not that I have a hoarding problem. It’s that I don’t like waste. I don’t
think our throw-away culture is healthy. The best place for a woodworker to
store their wood is at the lumber yard, but woodworkers will always have extra
pieces from previous projects. I want to be able to save the cut-offs from
bigger woodworking projects for smaller projects.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/wood-on-ground-2.jpg" alt="Wood on ground" /></p>

<p>See? I don’t have a problem! I should totally buy more wood to store my other
wood! This
<a href="https://jayscustomcreations.com/2014/08/inexpensive-conduit-lumber-rack/">guy’s</a>
wood storage design looks simple enough.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/empy-wall.jpg" alt="Empty wall" /></p>

<p>This empty white wall is just asking to be the supporting role in a terrifying
hostage video. We better cover it up with a wood rack.</p>

<p>I started the project by cutting three 2x4’s to length, with a little 45°
cut at the bottom to reduce chipping. These will be attached to the wall.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/twobys.jpg" alt="Twobys" /></p>

<p>I then cut the pieces of metal conduit down to size with a reciprocating
saw.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/cut-conduit.jpg" alt="Cutting Conduit" /></p>

<p>I don’t want to injure my delicate hands, so it’s important to clean up the
rough metal edges. I don’t have a grinder or stationary belt sander, so I just
clamped my belt sander to the table.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/sanding.jpg" alt="Sanding" /></p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/conduit.jpg" alt="Conduit" /></p>

<p>To increase the stability of the wood being stored on the rack, I wanted to
slightly angle the conduit up. This means that I had to drill the holes into
the 2x4’s at an angle. The drill press makes this job easy.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/drill-press.jpg" alt="Drill press" /></p>

<p>I knew I kept those two sets of forstner bits for a reason…</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/drill-hole.jpg" alt="Drill hole" /></p>

<p>The hardest part about this project was installing the 2x4 supports on the
cinder block wall. When drilling into a cinder block wall, the hammer drill
makes a high-pitched crunching noise that makes me question home ownership and
the integrity of the foundation.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/hammer-drill.jpg" alt="Hammer drill" /></p>

<p>I had to use a hammer drill to put holes in the cinder blocks to accept the
<a href="https://www.tapcon.com/">Tapcon</a> screws I used to hold the wood against the
wall. Despite following the instructions for the Tapcon screws, it seems that
the suggested masonry drill bit sizes never work with their anchors. I don’t
know what’s wrong. It could be that maybe I’m illiterate, but Tapcon uses color
codes to match the suggested drill bits size with the appropriate anchors, so
that’s not it.</p>

<p>After a few hours of white-knuckling the hammer drill and grinding my teeth, I
was able to get three good anchors through each 2x4 and into the wall.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/wood-rack-empty.jpg" alt="Empty Rack" /></p>

<p>To make sure the rack will hold the pieces of wood level, use a bubble level
across the conduit between two 2x4’s while drilling the holes for the
screws. This will ensure that the stored wood will distribute its weight evenly
across the supports.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/wood-rack.jpg" alt="Wood Rack" /></p>

<p>Yes, that’s satisfying. My shame is no longer on the ground, but proudly
displayed on the wall.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-02-22-wood-rack/wood-on-rack-1.jpg" alt="Wood on Rack" /></p>]]></content><author><name>Kevin DeMarco</name></author><category term="woodworking" /><category term="storage" /><summary type="html"><![CDATA[Do you actually have a hoarding problem if you can build efficient storage solutions for things that you can’t throw away? I’m not going to answer that question because I probably won’t like the answer.]]></summary></entry><entry><title type="html">Bamboomba: The sort of wooden robot.</title><link href="https://kevindemarco.com/robotics/ros/woodworking/2021/01/19/bamboomba-part-1.html" rel="alternate" type="text/html" title="Bamboomba: The sort of wooden robot." /><published>2021-01-19T11:00:00-05:00</published><updated>2021-01-19T11:00:00-05:00</updated><id>https://kevindemarco.com/robotics/ros/woodworking/2021/01/19/bamboomba-part-1</id><content type="html" xml:base="https://kevindemarco.com/robotics/ros/woodworking/2021/01/19/bamboomba-part-1.html"><![CDATA[<p>What do you get when you cross a Roomba…</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/apart_roomba.jpg" alt="Apart Roomba" /></p>

<p>with scrap wood?</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/scroll-saw-wood.jpg" alt="Wood with scroll saw" /></p>

<p>You get… Bamboomba!</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/bamboomba.jpg" alt="Bamboomba" /></p>

<p>You might be wondering why Kevin, being the professional researcher who he is,
decided to build a half-wooden monstrosity with an obsolete robot base.  Didn’t
Kevin go to college for thirteen years or something? Why don’t you just <em>buy</em> a
robot, Kevin? How is this robot going to help you pay your mortgage? Kevin.</p>

<p>Jeeeeeez, stop hassling me. I built Bamboomba to show what is possible with a
couple of low-cost sensors and to learn about the new features in the <a href="https://index.ros.org/doc/ros2/">Robot
Operating System (ROS) 2</a>
<a href="https://navigation.ros.org/">Navigation2</a> software stack. Also, I think it’s a
really funny name.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/ruler.jpg" alt="Ruler" /></p>

<p>To be completely honest, when my friend and I co-founded <a href="https://www.rifrobotics.com">RIF
Robotics</a> in the fall of 2020, we submitted an
application to Clearpath Robotics’
<a href="https://clearpathrobotics.com/blog/2020/11/winners-of-the-2020-partnerbot-grant-program-announced-putting-robotic-platforms-in-researchers-hands/">PartnerBot</a>
program and we won! That means we will be receiving an industrial-grade indoor
ground robot in February 2021 named
<a href="https://clearpathrobotics.com/dingo-indoor-mobile-robot/">Dingo</a>.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/dingo.png" alt="Bamboomba" /></p>

<p>We will be using the ROS2 and Navigation2 software stacks to control Dingo and
build maps of the environment with a LIDAR, but I wanted to get a head start on
the software development, so I built Bamboomba as a surrogate platform. Both
Bamboomba and Dingo will have the same sensor suite and software stack, so
moving between the two platforms should be fairly seamless. I do know what I’m
doing, right? The sensor suite consists of an <a href="https://www.intelrealsense.com/depth-camera-d435/">Intel RealSense
D435i</a> and an <a href="https://www.slamtec.com/en/Lidar/A2">RP LIDAR
A2</a>.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/sensor-suite.jpg" alt="Sensors" /></p>

<p>The D435i provides an inertial measurement unit (i.e., measurements of linear
and rotational accelerations), a 2D RGB image, and a 3D point cloud of the
environment. The RP LIDAR uses a rotating laser to measure distances to objects
around the robot in 360°. There will be more on these sensors and how
they help the robot to build maps and navigate around obstacles in a future
post. The important part to note at this moment is that I hand cut and drilled
the mounts for these professional sensors without using any CAD software or 3D
printers. One of my industrial design friends said that he calls anything not
cut by a <a href="https://en.wikipedia.org/wiki/Numerical_control">CNC</a> machine
“folksy.”  Like folk music. Not written down. I prefer the term, “Artisinal
Robotics.”</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/artisinal-robotics.gif" alt="Artisinal Robotics" /></p>

<p>That GIF isn’t from a random woodworking project. I was fine-tuning the
mounting block for the LIDAR on the shooting board that I made with a chisel
and hand router.</p>

<p>Bamboomba is loosely based on the
<a href="https://www.turtlebot.com/turtlebot2/">Turtlebot</a> design, which has been used
extensively in the open source and academic robotics communities.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/turtlebot.png" alt="Turtlebot" /></p>

<p>But Bamboomba is a lot cheaper, only took one day to build from scratch, and,
literally, can’t be faithfully reproduced! The main idea I took from the
Turtlebot was the multiple levels offset by aluminum stand-offs. This sparse
design allows a roboticist to attach random sensors to the platforms and a
closed laptop (the robot “brains”) can fit on one of the platforms. I was able
to cut the platforms out of spare plywood using my scroll saw. I didn’t want to
order aluminum stand-offs from an expensive mechanical parts store and, more
importantly, wait two weeks for the parts to arrive, so I drove five minutes to
Lowe’s and stared at the mechanical fasteners section for an hour until I came
up with the following design for the stand-offs:</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/standoffs.jpg" alt="Stand offs" /></p>

<p>The aluminum rod cost $10 and I was able to cut it precisely with a pipe cutter:</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/cutting.jpg" alt="Cutting" /></p>

<p>Once the aluminum rod stand-offs were cut to size, it was fairly easy to
assemble the platforms. The most tedious part was determining where to drill
the holes for the screws to pass through without a template. This involved
drawing intersecting lines to find the midpoint between mounting screw
locations and transferring hole points by laying the wooden platforms directly
on top of each other. If you look closely, you can see my layout lines.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/platforms.jpg" alt="Standoffs" /></p>

<p>When designing a ground robot with a single planar LIDAR, one of the most
difficult design decisions is where to place the LIDAR. If the LIDAR is mounted
at a low-point on the robot, it will ensure that the LIDAR doesn’t miss any
obstacles close to the ground. However, if the LIDAR is close to the ground,
the laser will most likely be obstructed by other mechanical structures on the
robot. This is opposed to mounting the LIDAR on top of the robot, where it can
have an unobstructed 360° view of its surroundings. However, the LIDAR will
not be able to see objects that are below its line-of-sight, which could result
in collisions with low-lying obstacles! Of course, you could use multiple
LIDARs to cover the blind spots, but that costs more money and Bamboomba is not
that kind of robot. I drilled mounting holes for the LIDAR in both the bottom
and the top platforms, so that I could experiment with mounting the LIDAR at
two different heights. When the LIDAR is in the bottom configuration, I route
the LIDAR and serial cables behind the aluminum stand-off to reduce the
obstructions in the LIDAR’s field-of-view. The cables are beautifully secured
in place with zip ties.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/lidar-bottom.jpg" alt="LIDAR Bottom" /></p>

<p>When the LIDAR is mounted in the top configuration, it has to be raised
slightly to ensure that its laser is not obstructed by the RealSense
camera. This is done with the 3/4” piece of wood that played the starring role
in the previous animated GIF.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/angle-view.jpg" alt="Angle View" /></p>

<p>Finally, the laptop is mounted to Bamboomba with velcro to make it easy to remove.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/front-view.jpg" alt="Front View" /></p>

<p>I hope this article will inspire others to hack their own Roombas into wooden
abominations. There are <a href="https://github.com/tork-a/roomblock">other</a> ways to
<a href="https://www.turtlebot.com/build/">build</a> or
<a href="https://dabit.industries/products/turtlebot-2">buy</a> a similar robot, but I
like mine best. Bamboomba’s platform is made from readily accessible parts that
can be put together in a day with some basic cutting tools.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-19-bamboomba-part-1/parts-on-bench.jpg" alt="Parts" /></p>

<p>I’ve got to come clean about something that has really been bothering me. The
robot’s base is not really a Roomba. It’s an <a href="https://en.wikipedia.org/wiki/IRobot_Create">iRobot
Create</a>. But the bamboo + Roomba
name was <em>soooo</em> good and it’s basically the Roomba without the vacuum. My
roommate from college gifted me the Create back in 2008 for being in his
wedding when I had not even considered studying robotics in graduate school. He
knew what I wanted.</p>

<p>In a future post, I will describe how the ROS2 and Navigation2 software stacks
are used to build maps and navigate around obstacles in
the environment with the LIDAR.</p>

<p>Thanks for following along.</p>]]></content><author><name>Kevin DeMarco</name></author><category term="robotics" /><category term="ROS" /><category term="woodworking" /><summary type="html"><![CDATA[What do you get when you cross a Roomba…]]></summary></entry><entry><title type="html">A Handcrafted Dovetail Box</title><link href="https://kevindemarco.com/woodworking/handtools/box/2021/01/15/dovetail-box.html" rel="alternate" type="text/html" title="A Handcrafted Dovetail Box" /><published>2021-01-15T09:45:00-05:00</published><updated>2021-01-15T09:45:00-05:00</updated><id>https://kevindemarco.com/woodworking/handtools/box/2021/01/15/dovetail-box</id><content type="html" xml:base="https://kevindemarco.com/woodworking/handtools/box/2021/01/15/dovetail-box.html"><![CDATA[<p><img src="https://kevindemarco.com/assets/images/2021-01-15-dovetail-box/DSC_0520.JPG" alt="Dovetail box front" /></p>

<p>My educational background is in Electrical and Computer Engineering with a
strong bent towards Computer Science. This means that I spend most of my day
typing on a computer, reading technical papers, designing systems, writing
code, and communicating with team members. Even when I am designing mechanical
systems for the real world or using CAD programs to 3D print objects, almost
all the work is done on a computer. That’s why I prioritize woodworking. I
believe, that as humans, we need short-term, tangible (i.e., physical) outcomes
to keep us from obsessing over potentially non-real things. Woodworking
provides the physical connection to the world that so many computer-addicted
folks desire. I can’t tell you how many times I’ve come across a programmer’s
blog who also listed “woodworking” as one of their hobbies. I should probably
start a Meetup.com group for these people (myself included). Throw in
“bicycling” and my target support group is pretty well defined.</p>

<figure class="">
  <img src="/assets/images/2021-01-15-dovetail-box/venn-diagram.png" alt="One of us. One of us." /><figcaption>
      One of us. One of us.

    </figcaption></figure>

<p>Now that I have sufficiently pigeonholed myself, I can describe the dovetail
box. I built this dovetail box as a Christmas present for my father. With the
2020 pandemic in full-force, which made visiting family members irresponsible,
I decided that a hand-made gift was better than feeding the online e-commerce
beast. After I bought the lumber from a store, I built it completely with hand
tools, no electricity required.</p>

<figure class="">
  <img src="/assets/images/2021-01-15-dovetail-box/handtools.jpg" alt="Hand tools" /><figcaption>
      Saws, blades, steel, and blood (my own).

    </figcaption></figure>

<p>The box is made from 3/4 inch poplar that I purchased from a local hardware
store. Poplar is a nice wood for beginner hand tool woodworkers. It is
considered a “hard” wood, which means it is less likely to splinter and shatter
like pine, but it won’t dull the edges of your blades as quickly as other hard
woods, such as red oak. Also, poplar is widely available in the big box stores
at a reasonable price. Since my 7th grade wood shop class didn’t teach us how
to use traditional hand tools, I learned from the masters on YouTube. When
possible, I subscribe to the <a href="https://www.youtube.com/user/PaulSellersWoodwork">Paul
Sellers</a> school of thought
when working wood. Many of the techniques that I used to build this dovetail
box were from his video on the <a href="https://youtu.be/SibYJ8JtOo4">same
subject</a>.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-15-dovetail-box/DSC_0531.JPG" alt="Side detail 2" /></p>

<p>What is both appealing and intimidating about Paul Seller’s approach to
woodworking is that it requires practice, artistry, and learned skills. Anyone
can read learn how to make straight cuts on a table saw in a matter of minutes,
but learning how to set and use a plane to flatten a piece of wood could take
months or years. For Paul Sellers, the woodworker’s skill with the saw or plane
can overcome any imperfections in the wood or tool - “A Good Craftsman Never
Blames His Tools” (of course this statement has multiple
<a href="http://www.javiercasas.com/articles/good-craftsman-never-blames-tools/">interpretations</a>). From
my perspective, woodworking is a hobby that I use to escape from the technical
perfection that is required in my daily profession. I enjoyed rounding over the
edges of this box with a hand plane, which felt like free-hand sculpting.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-15-dovetail-box/DSC_0524.JPG" alt="Side detail 1" /></p>

<p>I have also borrowed techniques from <a href="https://www.youtube.com/watch?v=ibyTMTLjaq8&amp;t=122s">David
Barron</a>. I prefer his
technique of using a fine-toothed <a href="https://www.highlandwoodworking.com/knew-concepts-5in-woodworkers-fretsaw.aspx">coping
saw</a>
to cut the waste from dovetails instead of “chopping” them with a chisel, which
Paul Sellers prefers. Still, I often use Paul Sellers’ technique for setting
and installing hinges for box lids and doors. The accuracy on these recessed
hinges, without using a measuring device or jig, is quite satisfying.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-15-dovetail-box/DSC_0522.JPG" alt="Box hinges" /></p>

<p>Poplar isn’t known for having nicely “figured” wood. However, I was able to
identify an interesting feature on this poplar and I used it on the lid of the
box.</p>

<p><img src="https://kevindemarco.com/assets/images/2021-01-15-dovetail-box/DSC_0526.JPG" alt="Top detail" /></p>

<p>To finish the box, I used a single coat of <a href="https://www.lowes.com/pd/Minwax-Wood-Finish-Satin-Colonial-Maple-Oil-based-Interior-Stain-Actual-Net-Contents-8-fl-oz/999914527">colonial maple
stain</a>
and two coats of <a href="https://www.lowes.com/pd/WATCO-Brown-Danish-Oil-Actual-Net-Contents-16-fl-oz/3142391?cm_mmc=shp-_-c-_-prd-_-pnt-_-google-_-lia-_-219-_-interiorstains-_-3142391-_-0&amp;placeholder=null&amp;ds_rl=1286981&amp;gclid=CjwKCAiAl4WABhAJEiwATUnEF7em7_JC6P0BLgOs2R5DDnbi1EAVwbkwTVPzFNpFH6uf2b3KiRXH0hoCgR8QAvD_BwE&amp;gclsrc=aw.ds">danish
oil</a>.</p>

<p>When the lock down of 2020 began, I made myself a commitment to improve my hand
tool working skills. Getting better at using hand tools is very similar to
getting better at playing a musical instrument (c.f. <a href="https://www.goodreads.com/book/show/18886619-the-foundations-of-better-woodworking">Jeff
Miller</a>]). Both
activities require constant regular practice and assessment. Excuse me while I
go make 365 dovetail boxes.</p>]]></content><author><name>Kevin DeMarco</name></author><category term="woodworking" /><category term="handtools" /><category term="box" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Remote Pair Programming via SSH and wemux on Linux</title><link href="https://kevindemarco.com/ssh/programming/ngrok/tmux/wemux/terminal/2020/03/25/pair-programming.html" rel="alternate" type="text/html" title="Remote Pair Programming via SSH and wemux on Linux" /><published>2020-03-25T23:11:13-04:00</published><updated>2020-03-25T23:11:13-04:00</updated><id>https://kevindemarco.com/ssh/programming/ngrok/tmux/wemux/terminal/2020/03/25/pair-programming</id><content type="html" xml:base="https://kevindemarco.com/ssh/programming/ngrok/tmux/wemux/terminal/2020/03/25/pair-programming.html"><![CDATA[<p>There are several benefits to the use of pair programming in the software
development process: fewer mistakes, better understanding of the codebase
across multiple developers, and improved team cohesiveness (cf. <a href="https://www.verypossible.com/blog/pros-and-cons-of-pair-programming">The Pros and
Cons of Pair Programming</a>). Personally,
I have found pair programming can be especially useful for
training. Experienced developers forget the multitude of tiny stumbling blocks
that less experienced developers encounter on a daily basis. Also, it can be
helpful for less experienced developers to see how experienced developers have
customized their tools for increased productivity (e.g., terminal setup, emacs
config, vim config, etc.)</p>

<p>However, when working remotely, pair programming can be difficult without a
simple and secure process. In this post, I describe the steps required to setup
a secure pair programming process in which one (remote) developer SSH’s into
another (host) developer’s Linux machine. The host developer will be able to
specify which remote developers have access and also see the command line
keyboard entries made by the remote developer. We will also configure the host
machine such that the remote user will not be able to SSH into the host machine
unless the host developer runs a specific terminal sharing program (i.e.,
wemux). While this setup is fairly secure, you shouldn’t grant access to remote
developers that you don’t trust.</p>

<h2 id="system-overview">System Overview</h2>

<p>A high-level diagram of the setup is shown in the following figure.</p>

<p><img src="https://kevindemarco.com/assets/images/2020-03-25-pair-programming/pair-ssh-diagram.jpg" alt="Pair SSH Diagram" /></p>

<p>As shown in the diagram, the pair programming server is initiated by the host
developer running the <code class="language-plaintext highlighter-rouge">wemux</code> command. The remote developer then uses SSH to
log into the <code class="language-plaintext highlighter-rouge">pair</code> Linux user on the host machine. The pair user’s
<code class="language-plaintext highlighter-rouge">~/.profile</code> file is configured to run the command, <code class="language-plaintext highlighter-rouge">wemux pair; exit</code>, which
forces the remote user to immediately join the wemux session upon login and
exit the SSH session when the wemux session ends. Finally, to make it easier to
SSH into computers that are behind firewalls, proxies, and VPN servers, the
host machine will use <code class="language-plaintext highlighter-rouge">ngrok</code> to provide an SSH tunnel (cf. <a href="https://ngrok.com/">ngrok</a>).</p>

<h2 id="one-time-host-linux-machine-configuration">One-Time Host Linux Machine Configuration</h2>

<h3 id="install-package-dependencies">Install Package Dependencies</h3>

<p>Install the SSH server, tmux, and the snap package manager with your system’s
package manager:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>openssh-server tmux snapd</code></pre></figure>

<h3 id="install-the-ngrok-snap-package">Install the ngrok snap package</h3>

<p><a href="https://ngrok.com/">ngrok</a> will be used to create an SSH tunnel to the host machine that
can be securely accessed behind firewalls and VPN servers.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>snap <span class="nb">install </span>ngrok</code></pre></figure>

<h4 id="configure-ngrok">Configure ngrok</h4>

<p>Create an ngrok account:
<a href="https://dashboard.ngrok.com/login">https://dashboard.ngrok.com/login</a></p>

<p>After creating your ngrok account, you will need to use the tunnel
authorization token in your ngrok account to authorize your machine. Copy the
authorization token from the website,
<a href="https://dashboard.ngrok.com/auth">https://dashboard.ngrok.com/auth</a>, and run
the following command, where <code class="language-plaintext highlighter-rouge">&lt;authorization-token&gt;</code> is the copied token:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ngrok authtoken &lt;authorization-token&gt;</code></pre></figure>

<h3 id="install-and-configure-wemux">Install and Configure wemux</h3>

<p><a href="https://github.com/zolrath/wemux">wemux</a> is a project that allows multiple
developers to directly collaborate on the same command line. (wemux leverages
<a href="https://github.com/tmux/tmux">tmux</a>.) First, clone the wemux project to a
local directory. Typically, I keep 3rd-party repositories in a separate
directory:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> ~/repos/3rd-party
<span class="nv">$ </span><span class="nb">cd</span> ~/repos/3rd-party
<span class="nv">$ </span>git clone https://github.com/zolrath/wemux.git</code></pre></figure>

<p>Now, configure wemux to only allow the host user to start a wemux session:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd </span>wemux
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"host_list=(</span><span class="k">${</span><span class="nv">USER</span><span class="k">}</span><span class="s2">)"</span> <span class="o">&gt;&gt;</span> ./wemux.conf.example</code></pre></figure>

<p>Symbolically link the <code class="language-plaintext highlighter-rouge">wemux</code> executable to a directory that is on the system
<code class="language-plaintext highlighter-rouge">$PATH</code> and link the configuration file to the default location (you will need
to run the following commands with <code class="language-plaintext highlighter-rouge">sudo</code>):</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo ln</span> <span class="nt">-s</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/wemux /usr/local/bin/wemux <span class="o">&amp;&amp;</span> <span class="se">\</span>
  <span class="nb">sudo ln</span> <span class="nt">-s</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/wemux.conf.example /usr/local/etc/wemux.conf</code></pre></figure>

<h3 id="create-a-new-linux-user">Create a new Linux User</h3>

<p>We will create a new Linux user, called <code class="language-plaintext highlighter-rouge">pair</code>, that will only be used by
remote pair programming users. You can accept the default values when running
the <code class="language-plaintext highlighter-rouge">adduser</code> command, but make sure you specify a non-trivial password for the
new user.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>adduser pair</code></pre></figure>

<p>Now that the user has been created, let’s modify the user’s <code class="language-plaintext highlighter-rouge">~/.profile</code> file
such that when the remote user logs in, they are immediately dropped into the
currently running <code class="language-plaintext highlighter-rouge">wemux</code> session.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo</span> /bin/bash <span class="nt">-c</span> <span class="s2">"printf </span><span class="se">\"</span><span class="s2">wemux pair</span><span class="se">\n</span><span class="s2">exit</span><span class="se">\n\"</span><span class="s2"> &gt;&gt; /home/pair/.profile"</span></code></pre></figure>

<p>If the remote user tries to log into the <code class="language-plaintext highlighter-rouge">pair</code> user and the host isn’t running
<code class="language-plaintext highlighter-rouge">wemux</code>, then the user’s SSH session is immediately terminated. Through this
mechanism, the host developer specifies when the remote user can access the
<code class="language-plaintext highlighter-rouge">pair</code> user. Also, the <code class="language-plaintext highlighter-rouge">exit</code> command terminates the <code class="language-plaintext highlighter-rouge">pair</code> user’s session
when the <code class="language-plaintext highlighter-rouge">wemux</code> session ends.</p>

<p>To hold the public keys from remote developers, let’s create the
<code class="language-plaintext highlighter-rouge">authorized_keys</code> file for the <code class="language-plaintext highlighter-rouge">pair</code> user:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo</span> /bin/bash <span class="nt">-c</span> <span class="s2">"mkdir -p /home/pair/.ssh &amp;&amp; touch /home/pair/.ssh/authorized_keys"</span></code></pre></figure>

<p>For additional security, let’s configure the SSH server such that the <code class="language-plaintext highlighter-rouge">pair</code>
user can’t login with a password and then we’ll restart the SSH server:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo</span> /bin/bash <span class="nt">-c</span> <span class="s2">"printf </span><span class="se">\"</span><span class="s2">Match User pair</span><span class="se">\n</span><span class="s2">    PasswordAuthentication no</span><span class="se">\n\"</span><span class="s2"> &gt;&gt; /etc/ssh/sshd_config"</span>
<span class="nv">$ </span><span class="nb">sudo </span>service ssh restart</code></pre></figure>

<h2 id="host-machine-session-initiation">Host Machine Session Initiation</h2>

<p>The following are the typical steps required when initiating a new pair
programming session.</p>

<h3 id="enable-ssh-login-via-publicprivate-key-authentication">Enable SSH Login via Public/Private Key Authentication</h3>

<p>The remote user will log into the <code class="language-plaintext highlighter-rouge">pair</code> user, but we don’t want the remote
user to have to know the password for the <code class="language-plaintext highlighter-rouge">pair</code> user, so we will use
public/private key authentication for SSH login. The remote user needs to send
their public key (typically located at <code class="language-plaintext highlighter-rouge">~/.ssh/id_rsa.pub</code>) to the host
developer. If the remote developer hasn’t generated SSH keys yet, the remote
user should generate SSH keys with the following command (substituting a valid
e-mail address):</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 4096 <span class="nt">-C</span> <span class="s2">"your_email@example.com"</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">id_rsa.pub</code> file can be transferred to the host developer via e-mail,
chat, etc. Upon reception of <code class="language-plaintext highlighter-rouge">id_rsa.pub</code>, the host developer can add the
public key to the <code class="language-plaintext highlighter-rouge">pair</code> user’s <code class="language-plaintext highlighter-rouge">authorized_keys</code> file to enable password-less
SSH login:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo</span> /bin/bash <span class="nt">-c</span> <span class="s2">"cat id_rsa.pub &gt;&gt; /home/pair/.ssh/authorized_keys"</span></code></pre></figure>

<h3 id="expose-ssh-port-via-ngrok">Expose SSH Port via ngrok</h3>

<p>The host developer will now use the <code class="language-plaintext highlighter-rouge">ngrok</code> command to expose port 22 of the
SSH server:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ngrok tcp 22</code></pre></figure>

<p>The ngrok connection information will be printed to the screen. Note the
information in the “Forwarding” section as this will be sent to the remote
developer to access the host’s SSH server. For example, if the “Forwarding”
section contained the following information:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Forwarding                    tcp://0.tcp.ngrok.io:14242 -&gt; localhost:22</code></pre></figure>

<p>The remote user would use the following SSH command to log into the host’s
machine (the <code class="language-plaintext highlighter-rouge">-p</code> flag specifies the SSH port):</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ssh <span class="nt">-p</span> 14242 pair@0.tcp.ngrok.io</code></pre></figure>

<h3 id="start-wemux-host-session">Start wemux Host Session</h3>

<p>The remote developer will not be able to log into the <code class="language-plaintext highlighter-rouge">pair</code> user until the
host developer starts the wemux session in a separate terminal:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>wemux</code></pre></figure>

<p>At this point, the remote developer can run the previously shown SSH
command. When, the host exits the wemux session, both users will be removed
from the session and the remote user will be logged off.</p>

<h2 id="configuration-options">Configuration Options</h2>

<h3 id="wemux-options">wemux options</h3>

<p>If you don’t want the remote user to be able to enter commands, you can force
the remote user into the “mirror” mode by changing <code class="language-plaintext highlighter-rouge">wemux pair</code> to <code class="language-plaintext highlighter-rouge">wemux
mirror</code> in the <code class="language-plaintext highlighter-rouge">~/.profile</code> file.</p>

<h2 id="other-notes">Other Notes</h2>

<p>After you modify the <code class="language-plaintext highlighter-rouge">pair</code> user’s <code class="language-plaintext highlighter-rouge">~/.profile</code> file, you won’t be able to
easily log into <code class="language-plaintext highlighter-rouge">pair</code> user with the normal <code class="language-plaintext highlighter-rouge">su pair</code> command without having to
start the wemux server. Instead, you can just directly modify the user’s
configuration files by prefixing your editor call with <code class="language-plaintext highlighter-rouge">sudo</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">sudo </span>nano /home/pair/.profile</code></pre></figure>

<h2 id="references">References</h2>

<p>The following blog posts were used to put together this post:</p>
<ul>
  <li><a href="https://brianschiller.com/blog/2014/07/18/pair-programming-wemux">Pair Programming with wemux and ngrok</a></li>
  <li><a href="http://martinbrochhaus.com/pair.html">Pair Programming With Tmux</a></li>
  <li><a href="https://www.hamvocke.com/blog/remote-pair-programming-with-tmux/">Remote Pair Programming Made Easy with SSH and tmux</a></li>
  <li><a href="https://ryanlue.com/posts/2018-01-13-pair-programming-over-ssh">ssh + tmux = Pair Programming for Command Line Junkies</a></li>
</ul>]]></content><author><name>Kevin DeMarco</name></author><category term="ssh" /><category term="programming" /><category term="ngrok" /><category term="tmux" /><category term="wemux" /><category term="terminal" /><summary type="html"><![CDATA[There are several benefits to the use of pair programming in the software development process: fewer mistakes, better understanding of the codebase across multiple developers, and improved team cohesiveness (cf. The Pros and Cons of Pair Programming). Personally, I have found pair programming can be especially useful for training. Experienced developers forget the multitude of tiny stumbling blocks that less experienced developers encounter on a daily basis. Also, it can be helpful for less experienced developers to see how experienced developers have customized their tools for increased productivity (e.g., terminal setup, emacs config, vim config, etc.)]]></summary></entry></feed>